version: '2.2'
services:

  db:
    image: geonode/postgis:9.6
    restart: on-failure
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - ./scripts/docker/env/production/db.env

  geo-db:
    image: kartoza/postgis:9.6-2.4
    container_name: geo-db-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    environment:
      ALLOW_IP_RANGE: 0.0.0.0/0
      POSTGRES_DB: gis
      POSTGRES_PASS: k@rtoz@
      POSTGRES_USER: kartoza
    labels:
        org.geonode.component: geo-db
        org.geonode.instance.name: geonode
    volumes:
    - postgis-data:/var/lib/postgresql
    ports:
    - 5432

  dbbackups-django:
    image: kartoza/pg-backup:9.6
    container_name: dbbackups-django-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    environment:
      DUMPPREFIX: PG_geonode_django
      PGDATABASE: geonode
      PGHOST: db
      PGPASSWORD: geonode
      PGPORT: '5432'
      PGUSER: geonode
    labels:
        org.geonode.component: dbbackups-django
        org.geonode.instance.name: geonode
    volumes:
    - dbbackups:/backups
    depends_on:
      - db

  dbbackups-geonode_data:
    image: kartoza/pg-backup:9.6
    container_name: dbbackups-geonode_data-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    environment:
      DUMPPREFIX: PG_geonode_data
      PGDATABASE: geonode_data
      PGHOST: db
      PGPASSWORD: geonode_data
      PGPORT: '5432'
      PGUSER: geonode_data
    labels:
        org.geonode.component: dbbackups-geonode_data
        org.geonode.instance.name: geonode
    volumes:
    - dbbackups:/backups
    depends_on:
      - db

  dbbackups-geo-db:
    image: kartoza/pg-backup:9.6
    container_name: dbbackups-geo-db-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    environment:
      DUMPPREFIX: PG_dbbackups-geo-db
      PGDATABASE: gis
      PGHOST: geo-db
      PGPASSWORD: geonode_data
      PGPORT: '5432'
      PGUSER: geonode_data
    labels:
        org.geonode.component: dbbackups-geo-db
        org.geonode.instance.name: geonode
    volumes:
    - dbbackups:/backups
    depends_on:
      - geo-db

  btsync-data:
    image: kartoza/btsync
    container_name: btsync-data-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    environment:
      DEVICE: PostGISDatabase
      SECRET: A3Z7DWSQ4LK4QDB6XMNQSQ5XPDVN6VTPD
    labels:
        org.geonode.component: btsync-data
        org.geonode.instance.name: geonode
    volumes:
    - db-backups:/web:rw
    - geoserver-data-dir:/web:rw

  smtp:
    image: catatnight/postfix
    container_name: smtp-4${COMPOSE_PROJECT_NAME}
    environment:
      - maildomain=kartoza.com
      - smtp_user=noreply:docker

  elasticsearch:
    image: elasticsearch
    restart: on-failure
    container_name: elasticsearch-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode

  rabbitmq:
    image: rabbitmq
    restart: on-failure
    container_name: rabbitmq-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode

  django:
    restart: on-failure
    image: geonode/geonode:latest
    container_name: django-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - smtp
    command: django-admin.py runserver 0.0.0.0:8000 --settings=geonode.settings
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/docker/env/production/django.env

  celery:
    restart: on-failure
    image: geonode/geonode:latest
    container_name: celery-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - geo-db
    command: celery worker --app=geonode.celery_app:app -B -l INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/docker/env/production/celery.env

  consumers:
    image: geonode/geonode:latest
    restart: on-failure
    container_name: consumers-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: consumers
        org.geonode.instance.name: geonode
    depends_on:
      - rabbitmq
      - db
      - elasticsearch
      - geo-db
    command: python manage.py runmessaging
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./scripts/docker/env/production/django.env

  geoserver:
    image: kartoza/geoserver:2.12.x
    restart: on-failure
    container_name: geoserver-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - geo-db
    ports:
      - 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - geoserver-data-dir:/opt/geoserver/data_dir
    env_file:
      - ./scripts/docker/env/production/geoserver.env

  geonode:
    image: geonode/nginx:geoserver
    restart: on-failure
    container_name: nginx-4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - geoserver
    ports:
      - "80:80"

  data-dir-conf:
    image: geonode/geoserver_data:2.12.x
    restart: on-failure
    container_name: gsconf-4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

volumes:

  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  postgis-data:
    name: ${COMPOSE_PROJECT_NAME}-postgis-data
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
